/*
Copyright 2021 The SuperEdge authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/attlee-wang/sites-manager/apis/site/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeUnitListLister helps list NodeUnitLists.
// All objects returned here must be treated as read-only.
type NodeUnitListLister interface {
	// List lists all NodeUnitLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeUnitList, err error)
	// NodeUnitLists returns an object that can list and get NodeUnitLists.
	NodeUnitLists(namespace string) NodeUnitListNamespaceLister
	NodeUnitListListerExpansion
}

// nodeUnitListLister implements the NodeUnitListLister interface.
type nodeUnitListLister struct {
	indexer cache.Indexer
}

// NewNodeUnitListLister returns a new NodeUnitListLister.
func NewNodeUnitListLister(indexer cache.Indexer) NodeUnitListLister {
	return &nodeUnitListLister{indexer: indexer}
}

// List lists all NodeUnitLists in the indexer.
func (s *nodeUnitListLister) List(selector labels.Selector) (ret []*v1.NodeUnitList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeUnitList))
	})
	return ret, err
}

// NodeUnitLists returns an object that can list and get NodeUnitLists.
func (s *nodeUnitListLister) NodeUnitLists(namespace string) NodeUnitListNamespaceLister {
	return nodeUnitListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeUnitListNamespaceLister helps list and get NodeUnitLists.
// All objects returned here must be treated as read-only.
type NodeUnitListNamespaceLister interface {
	// List lists all NodeUnitLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeUnitList, err error)
	// Get retrieves the NodeUnitList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NodeUnitList, error)
	NodeUnitListNamespaceListerExpansion
}

// nodeUnitListNamespaceLister implements the NodeUnitListNamespaceLister
// interface.
type nodeUnitListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeUnitLists in the indexer for a given namespace.
func (s nodeUnitListNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeUnitList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeUnitList))
	})
	return ret, err
}

// Get retrieves the NodeUnitList from the indexer for a given namespace and name.
func (s nodeUnitListNamespaceLister) Get(name string) (*v1.NodeUnitList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodeunitlist"), name)
	}
	return obj.(*v1.NodeUnitList), nil
}
